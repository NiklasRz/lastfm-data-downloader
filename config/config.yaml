include_albums: False # fetching albums is 92% of the runtime so you can omit them unless you need need them
fetch:  # what to fetch from the last.fm API. Don't change the order.
  - users  # fetches users and their friends (friends needed to snowball)
  - listens  # fetches listens, songs and artists
  - tags  # fetches tags of artists
limits:  # the maximum number of entries to fetch. You can set it to False if you don't want to limit it. You can interrupt the program at any time if you feel like you have enough data.
  users: 3 # maximum number of users to fetch
timeframe:
  # 2002(founding) until 2013-12 (2014-01 was a big change in the system)
  start_year: 2002  # start collecting listening from this year on
  start_month: 1  # start from the beginning of this month (1=Jan)
  end_year: 2014 # last year of data collection
  end_month: 1  # this month is not included in the data anymore
seeds:  # due to internal restrictions, the last.fm API needs some real user accounts with friends as a starting point. You can use the default values below or provide your own seeds.
  - edgarfuckedup
  - vikingfrog86
  - Amixor33


# === To finetune delays and keep within API rate limis. Default values should be fine ===

sleep:
  sleep_short: 60  # if there is a timeout, the process will sleep this many seconds before retrying
  sleep_long: 600  # if there is a sequence of timeouts, it will sleep this many times
  n_timeouts_until_long_sleep: 3  # this defines the length of the sequence of timeouts that triggers a long sleep
  between_process_inits: 30  # the duration in seconds to wait between starting two parallel processes. Prevents fetching the same data in parallel.
splitting_threshold: 10000  # if a user has more than this many listens, the retrieval is split to minimize the chance of timeout

# === for debugging and testing ===

debug: False
speedtest: False  # Tests the speed of all subfunctions in order to identify bottlenecks. unfortunately we have to add @profile manually to the functions we want to time
speedtest_sample: 500  # number of elements to fetch for the speed test
